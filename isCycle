class Solution {
    private boolean bfs(int node, boolean[] vis, List<List<Integer>> adj)
    {
        Queue<int[]> q = new LinkedList<>();
        vis[node]=true;
        q.add(new int[]{-1,node});
        while(!q.isEmpty())
        {
            int[] cur = q.poll();
            int p = cur[0];
            int c = cur[1];
            for(int temp : adj.get(c))
{            if(vis[temp]!=true)
            {
                vis[temp]=true;
                q.add(new int[]{c,temp});
            }
            else if(p!=temp)
            {
                return true;
            }
        }
  }
          return false;
        
    }
    public boolean isCycle(int V, int[][] edges) {
        // Code here
        List<List<Integer>> adj = new ArrayList<>();
        int n = edges.length;
        for(int i=0;i<V;i++)
        {
            adj.add(new ArrayList<>());
        }
        for(int[] edge:edges)
        {
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }
    boolean[] vis = new boolean[V];
    for(int i=0;i<V;i++)
    {
        if(vis[i]!=true)
        {
         if(dfs(i,vis,adj)) return true;
        }
    }
    return false;
    }
}
