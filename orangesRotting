class Solution {
    public int orangesRotting(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        Queue<Pair<Integer,Integer>> q = new LinkedList<>();
        int[][] vis = new int[n][m];
        int found=0;
        int temp=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==2)
                {
                    q.add(new Pair<>(i,j));
                }
                else{
                    vis[i][j]=0;
                    if(grid[i][j]==1)
                    {
                        found++;
                    }
                }
            }
        }
        int[] row = {-1,0,1,0};
        int[] col = {0,1,0,-1};
        while(!q.isEmpty())
        {
            boolean yes=false;
            int size= q.size();
            for(int i=0;i<size;i++)
            {
            Pair<Integer,Integer> cur = q.poll();
            int r = cur.getKey();
            int c = cur.getValue();
            for(int j=0;j<4;j++)
            {
                int dr = r + row[j];
                int dc = c+col[j];
                if(dr>=0 && dr<n && dc>=0 && dc<m && grid[dr][dc]==1 && vis[dr][dc]!=2)
                {
                    q.add(new Pair<>(dr,dc));
                    vis[dr][dc]=2;
                    found--;
                    yes=true;
                }
            }
          
        }
          if(yes)
            {
                temp++;
            }
        }
        return (found==0)?temp:-1;
        
    }
}
